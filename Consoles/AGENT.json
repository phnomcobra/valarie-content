{
    "8b91d444-a1d3-8584-b956-39ba482d1759": {
        "accepts": [], 
        "body": "#!/usr/bin/python\r\n\r\nimport json\r\nimport hashlib\r\nimport traceback\r\nimport urllib2\r\nimport httplib\r\nimport ssl\r\n\r\nfrom random import random\r\nfrom time import sleep, time\r\nfrom base64 import b64encode, b64decode\r\n\r\nclass MPIClient:\r\n    def __init__(self, url, secret_digest):\r\n        self.secret_digest = secret_digest\r\n        self.url = url\r\n\r\n    def __del__(self):\r\n        try:\r\n            self.session[\"connection\"].close()\r\n        except:\r\n            pass\r\n\r\n    def send_json(self, json_in):\r\n        st = time()\r\n        dt = 0\r\n        while time() - st < 15.0:\r\n            try:\r\n                return self.__send_json(json_in)\r\n            except:\r\n                sleep(dt)\r\n\r\n            dt = dt + 0.5\r\n        \r\n        raise Exception(\"MPI Request Timeout!\")\r\n\r\n    def __send_json(self, json_in):\r\n        raw_json_in = json.dumps(json_in)\r\n        \r\n        h = hashlib.sha256()\r\n        h.update(self.secret_digest)\r\n        h.update(raw_json_in)\r\n        \r\n        headers = {\r\n            'Content-Type' : 'application/json',\r\n            'Signature' : h.hexdigest()\r\n        }\r\n        \r\n        req = urllib2.Request(url = self.url)\r\n        \r\n        connection = httplib.HTTPSConnection(req.get_host(), context = ssl._create_unverified_context())\r\n        \r\n        connection.request(\"POST\", \\\r\n                           req.get_full_url(), \\\r\n                           raw_json_in, \\\r\n                           headers)\r\n        \r\n        response = connection.getresponse()\r\n        \r\n        signature = response.getheader(\"Signature\")\r\n        \r\n        raw_json_out = response.read()\r\n        \r\n        h = hashlib.sha256()\r\n        h.update(self.secret_digest)\r\n        h.update(raw_json_out)\r\n        \r\n        if h.hexdigest() != signature:\r\n            raise Exception(\"Signature mismatch encountered!\")\r\n        \r\n        json_out = json.loads(raw_json_out)\r\n        \r\n        return json_out\r\n\r\n    def ticket_request(self, request, timeout = None):\r\n        if timeout is not None:\r\n            return self.__ticket_request(request, timeout)\r\n        else:\r\n            try:\r\n                return self.__ticket_request(request)\r\n            except:\r\n                pass\r\n            \r\n            try:\r\n                return self.__ticket_request(request)\r\n            except:\r\n                pass\r\n            \r\n            return self.__ticket_request(request)\r\n    \r\n    def __ticket_request(self, request, timeout = None):\r\n        if timeout is None:\r\n            timeout = 60.0\r\n            \r\n        \r\n        message = {\r\n            \"type\" : \"create async ticket\",\r\n            \"request\" : request,\r\n        }\r\n        \r\n        tckuuid = self.send_json(message)[\"tckuuid\"]\r\n        \r\n        st = time()\r\n        dt = 0\r\n        while True:\r\n            sleep(dt)\r\n            \r\n            dt = dt + 0.5\r\n            \r\n            message = {\r\n                \"type\" : \"get ticket response\",\r\n                \"tckuuid\" : tckuuid,\r\n            }\r\n            \r\n            response = self.send_json(message)\r\n            \r\n            if response != None:\r\n                break\r\n\r\n            if time() - st > timeout:\r\n                raise Exception(\"MPI Response Timeout Exceeded!\")\r\n\r\n        message = {\r\n            \"type\" : \"delete ticket\",\r\n            \"tckuuid\" : tckuuid,\r\n        }\r\n        \r\n        self.send_json(message)\r\n        \r\n        return response\r\n    \r\n    def cascade_request(self, request, timeout = 5, etags = [], ftags = []):\r\n        responses = []\r\n        \r\n        message = {\r\n            \"type\" : \"create cascade async\",\r\n            \"request\" : request,\r\n            \"etags\" : etags,\r\n            \"ftags\" : ftags\r\n        }\r\n        \r\n        cscuuid = self.ticket_request(message)[\"cscuuid\"]\r\n        \r\n        lrt = time()\r\n        \r\n        while time() - lrt < timeout:\r\n            message = {\r\n                \"type\" : \"pull cascade responses\",\r\n                \"cscuuid\" : cscuuid,\r\n            }\r\n    \r\n            response = self.ticket_request(message)\r\n            \r\n            if len(response) > 0:\r\n                lrt = time()\r\n                responses += response\r\n\r\n        return responses\r\n\r\nclass Console:\r\n    def __init__(self, **kargs):\r\n        # Private Members\r\n        self.__remote_agtuuid = kargs[\"host\"][\"host\"]\r\n        \r\n        self.__remote_mpi = MPIClient('https://127.0.0.1:53443/mpi', \\\r\n                                      hashlib.sha256(\"changeme\").hexdigest())\r\n    \r\n    def delete_peer(self, agtuuid):\r\n        message = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"delete peer\",\r\n            \"agtuuid\" : agtuuid\r\n        }\r\n        \r\n        return self.__remote_mpi.ticket_request(message)\r\n    \r\n    def delete_peers(self):\r\n        message = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"delete peers\"\r\n        }\r\n        \r\n        return self.__remote_mpi.ticket_request(message)\r\n    \r\n    def get_peers(self):\r\n        message = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"get peers\"\r\n        }\r\n        \r\n        return self.__remote_mpi.ticket_request(message)\r\n    \r\n    \r\n    def set_peer(self, url, polling = True, ttl = None):\r\n        message = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"discover peer\",\r\n            \"polling\" : polling,\r\n            \"url\" : url\r\n        }\r\n        \r\n        if ttl != None:\r\n            message[\"ttl\"] = ttl\r\n        \r\n        return self.__remote_mpi.ticket_request(message)\r\n    \r\n    def get_routes(self):\r\n        message = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"get routes\"\r\n        }\r\n        \r\n        return self.__remote_mpi.ticket_request(message)\r\n    \r\n    def get_counters(self):\r\n        message = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"get counters\"\r\n        }\r\n        \r\n        return self.__remote_mpi.ticket_request(message)\r\n    \r\n    def file(self, filename, mode):\r\n        return FileWrapper(filename, \\\r\n                           self.__remote_agtuuid, \\\r\n                           self.__remote_mpi, \\\r\n                           mode)\r\n\r\n    def AGTCollection(self, name):\r\n        return AGTCollection(self.__remote_mpi, \\\r\n                             self.__remote_agtuuid, \\\r\n                             name)\r\n    \r\n    def AGTCollections(self, *args, **kargs):\r\n        return AGTCollections(self.__remote_mpi, *args, **kargs)\r\n    \r\n    def Cascade(self, *args, **kargs):\r\n        return Cascade(self.__remote_mpi, *args, **kargs)\r\n\r\n    def run_function_by_uuid(self, fctuuid, event = {}):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"run function\",\r\n            \"fctuuid\" : fctuuid,\r\n            \"event\" : event\r\n        }\r\n            \r\n        response = self.__remote_mpi.ticket_request(request, timeout = 900)\r\n        \r\n        if \"exception\" in response:\r\n            raise Exception(\"{0}\\n{1}\".format(response[\"exception\"], \\\r\n                                              json.dumps(response[\"context\"], \\\r\n                                                         indent = 4)))\r\n        else:\r\n            return response[\"result\"]\r\n    \r\n    def run_function_by_name(self, name, event = {}):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"run function\",\r\n            \"name\" : name,\r\n            \"event\" : event\r\n        }\r\n        \r\n        response = self.__remote_mpi.ticket_request(request, timeout = 900)\r\n        \r\n        if \"exception\" in response:\r\n            raise Exception(\"{0}\\n{1}\".format(response[\"exception\"], \\\r\n                                              json.dumps(response[\"context\"], \\\r\n                                                         indent = 4)))\r\n        else:\r\n            return response[\"result\"]\r\n\r\n    def close(self):\r\n        pass\r\n    \r\n    def writef(self, filename, body):\r\n        f = self.file(filename, mode = \"w\")\r\n        f.write(str(body))\r\n        f.close()\r\n    \r\n    def writebf(self, filename, body):\r\n        f = self.file(filename, mode = \"wb\")\r\n        f.write(body)\r\n        f.close()\r\n    \r\n    def readf(self, filename):\r\n        f = self.file(filename, mode = \"r\")\r\n        body = str(f.read())\r\n        f.close()\r\n        return body\r\n    \r\n    def readbf(self, filename):\r\n        f = self.file(filename, mode = \"rb\")\r\n        body = f.read()\r\n        f.close()\r\n        return body\r\n\r\n    #### System Command ##########################\r\n    def system(self, command, return_tuple = False, timeout = 3600):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"process handle create\",\r\n            \"command\" : command\r\n        }\r\n            \r\n        phduuid = self.__remote_mpi.ticket_request(request)[\"phduuid\"]\r\n        \r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"process handle status\",\r\n            \"phduuid\" : phduuid,\r\n        }\r\n        \r\n        status = self.__remote_mpi.ticket_request(request)[\"status\"]\r\n        \r\n        start_time = time()\r\n        while status == None:\r\n            request = {\r\n                \"dest\" : self.__remote_agtuuid,\r\n                \"type\" : \"process handle status\",\r\n                \"phduuid\" : phduuid,\r\n            }\r\n            \r\n            status = self.__remote_mpi.ticket_request(request)[\"status\"]\r\n            \r\n            if time() - start_time > timeout:\r\n                request = {\r\n                    \"dest\" : self.__remote_agtuuid,\r\n                    \"type\" : \"process handle close\",\r\n                    \"phduuid\" : phduuid,\r\n                }\r\n            \r\n                self.__remote_mpi.ticket_request(request)\r\n                \r\n                raise Exception(\"Process timeout exceeded!\")\r\n\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"process handle recv\",\r\n            \"phduuid\" : phduuid,\r\n        }\r\n            \r\n        recv_response = self.__remote_mpi.ticket_request(request)\r\n        \r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"process handle close\",\r\n            \"phduuid\" : phduuid,\r\n        }\r\n            \r\n        self.__remote_mpi.ticket_request(request)\r\n\r\n        # Lossy ascii character set conversion\r\n        output_buffer = \"\"\r\n        for c in b64decode(recv_response[\"stdout b64data\"]):\r\n            try:\r\n                output_buffer += c.encode(\"ascii\", \"ignore\")\r\n            except:\r\n                pass\r\n\r\n        # Lossy ascii character set conversion\r\n        stderr_buffer = \"\"\r\n        for c in b64decode(recv_response[\"stderr b64data\"]):\r\n            try:\r\n                stderr_buffer += c.encode(\"ascii\", \"ignore\")\r\n            except:\r\n                pass\r\n        \r\n        if return_tuple:\r\n            return status, output_buffer, stderr_buffer\r\n        else:\r\n            return output_buffer + stderr_buffer\r\n\r\nclass AGTObject:\r\n    def __init__(self, collection_name, remote_agtuuid, remote_mpi, object):\r\n        self.__remote_agtuuid = remote_agtuuid\r\n        self.__remote_mpi = remote_mpi\r\n        self.__collection_name = collection_name\r\n        \r\n        self.object = object\r\n        \r\n        self.agtuuid = remote_agtuuid\r\n        self.objuuid = self.object[\"objuuid\"]\r\n        self.coluuid = self.object[\"coluuid\"]\r\n\r\n    def load(self):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"get collection object\",\r\n            \"objuuid\" : self.objuuid,\r\n            \"name\" : self.__collection_name,\r\n        }\r\n        \r\n        self.object = self.__remote_mpi.ticket_request(request)\r\n        \r\n        self.objuuid = self.object[\"objuuid\"]\r\n        self.coluuid = self.object[\"coluuid\"]\r\n\r\n    def set(self):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"set collection object\",\r\n            \"name\" : self.__collection_name,\r\n            \"object\" : self.object\r\n        }\r\n            \r\n        self.__remote_mpi.ticket_request(request)\r\n    \r\n    def destroy(self):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"delete collection object\",\r\n            \"name\" : self.__collection_name,\r\n            \"objuuid\" : self.objuuid\r\n        }\r\n            \r\n        self.__remote_mpi.ticket_request(request)\r\n        \r\n        self.objuuid = None\r\n        self.coluuid = None\r\n        self.object = None\r\n\r\nclass Cascade:\r\n    def __init__(self, remote_mpi, timeout = 5, etags = [], ftags = []):\r\n        self.__remote_mpi = remote_mpi\r\n        self.__timeout = timeout\r\n        self.__etags = etags\r\n        self.__ftags = ftags\r\n    \r\n    def system(self, command, return_tuple = False):\r\n        request = {\r\n            \"type\" : \"process sync\",\r\n            \"command\" : command,\r\n            \"timeout\" : self.__timeout / 3\r\n        }\r\n        \r\n        outputs = {}\r\n        \r\n        for cascade_response in self.__remote_mpi.cascade_request(request = request, \\\r\n                                                                  timeout = self.__timeout, \\\r\n                                                                  etags = self.__etags, \\\r\n                                                                  ftags = self.__ftags):\r\n            # Lossy ascii character set conversion\r\n            output_buffer = \"\"\r\n            for c in b64decode(cascade_response[\"response\"][\"stdout\"]):\r\n                try:\r\n                    output_buffer += c.encode(\"ascii\", \"ignore\")\r\n                except:\r\n                    pass\r\n    \r\n            # Lossy ascii character set conversion\r\n            stderr_buffer = \"\"\r\n            for c in b64decode(cascade_response[\"response\"][\"stderr\"]):\r\n                try:\r\n                    stderr_buffer += c.encode(\"ascii\", \"ignore\")\r\n                except:\r\n                    pass\r\n            \r\n            if return_tuple:\r\n                outputs[cascade_response[\"src\"]] = cascade_response[\"response\"][\"status\"], \\\r\n                                                   output_buffer, \\\r\n                                                   stderr_buffer\r\n            else:\r\n                outputs[cascade_response[\"src\"]] = output_buffer + stderr_buffer\r\n        \r\n        return outputs\r\n    \r\n    def file_read(self, filename):\r\n        request = {\r\n            \"type\" : \"file read\",\r\n            \"filename\" : filename\r\n        }\r\n        \r\n        outputs = {}\r\n        \r\n        for cascade_response in self.__remote_mpi.cascade_request(request = request, \\\r\n                                                                  timeout = self.__timeout, \\\r\n                                                                  etags = self.__etags, \\\r\n                                                                  ftags = self.__ftags):\r\n            outputs[cascade_response[\"src\"]] = b64decode(cascade_response[\"response\"][\"b64data\"])\r\n                \r\n        return outputs\r\n    \r\n    def run_function_by_uuid(self, fctuuid, event = {}):\r\n        request = {\r\n            \"type\" : \"run function\",\r\n            \"fctuuid\" : fctuuid,\r\n            \"event\" : event\r\n        }\r\n            \r\n        outputs = {}\r\n        \r\n        for cascade_response in self.__remote_mpi.cascade_request(request = request, \\\r\n                                                                  timeout = self.__timeout, \\\r\n                                                                  etags = self.__etags, \\\r\n                                                                  ftags = self.__ftags):\r\n            if \"result\" in cascade_response[\"response\"]:\r\n                outputs[cascade_response[\"src\"]] = cascade_response[\"response\"][\"result\"]\r\n            elif \"exception\" in cascade_response[\"response\"]:\r\n                outputs[cascade_response[\"src\"]] = cascade_response[\"response\"][\"exception\"]\r\n                \r\n        return outputs\r\n    \r\n    def run_function_by_name(self, name, event = {}):\r\n        request = {\r\n            \"type\" : \"run function\",\r\n            \"name\" : name,\r\n            \"event\" : event\r\n        }\r\n            \r\n        outputs = {}\r\n        \r\n        for cascade_response in self.__remote_mpi.cascade_request(request = request, \\\r\n                                                                  timeout = self.__timeout, \\\r\n                                                                  etags = self.__etags, \\\r\n                                                                  ftags = self.__ftags):\r\n            if \"result\" in cascade_response[\"response\"]:\r\n                outputs[cascade_response[\"src\"]] = cascade_response[\"response\"][\"result\"]\r\n            elif \"exception\" in cascade_response[\"response\"]:\r\n                outputs[cascade_response[\"src\"]] = cascade_response[\"response\"][\"exception\"]\r\n                \r\n        return outputs\r\n\r\nclass AGTCollections:\r\n    def __init__(self, remote_mpi, collection_name, timeout = 5, etags = [], ftags = []):\r\n        self.__collection_name = collection_name\r\n        self.__remote_mpi = remote_mpi\r\n        self.__timeout = timeout\r\n        self.__etags = etags\r\n        self.__ftags = ftags\r\n    \r\n    def find(self, **kargs):\r\n        request = {\r\n            \"type\" : \"find collection objects\",\r\n            \"query\" : kargs,\r\n            \"name\" : self.__collection_name,\r\n        }\r\n        \r\n        objects = []\r\n        \r\n        for cascade_response in self.__remote_mpi.cascade_request(request = request, \\\r\n                                                                  etags = self.__etags, \\\r\n                                                                  ftags = self.__ftags, \\\r\n                                                                  timeout = self.__timeout):\r\n            for object in cascade_response[\"response\"]:\r\n                objects.append(AGTObject(self.__collection_name, \\\r\n                                         cascade_response[\"src\"], \\\r\n                                         self.__remote_mpi, object))\r\n\r\n        return objects\r\n\r\nclass AGTCollection:\r\n    def __init__(self, remote_mpi, remote_agtuuid, collection_name):\r\n        self.collection_name = collection_name\r\n        self.__remote_mpi = remote_mpi\r\n        self.__remote_agtuuid = remote_agtuuid\r\n        \r\n    def destroy(self):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"delete collection\",\r\n            \"name\" : self.collection_name\r\n        }\r\n            \r\n        self.__remote_mpi.ticket_request(request)\r\n    \r\n    def rename(self, name):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"rename collection\",\r\n            \"name\" : self.collection_name,\r\n            \"new name\" : name\r\n        }\r\n            \r\n        self.__remote_mpi.ticket_request(request)\r\n        \r\n        self.collection_name = name\r\n    \r\n    def create_attribute(self, attribute, path):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"create collection attribute\",\r\n            \"attribute\" : attribute,\r\n            \"path\" : path,\r\n            \"name\" : self.collection_name,\r\n        }\r\n            \r\n        self.__remote_mpi.ticket_request(request)\r\n    \r\n    def delete_attribute(self, attribute):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"delete collection attribute\",\r\n            \"attribute\" : attribute,\r\n            \"name\" : self.collection_name,\r\n        }\r\n            \r\n        self.__remote_mpi.ticket_request(request)\r\n    \r\n    def find(self, **kargs):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"find collection objects\",\r\n            \"query\" : kargs,\r\n            \"name\" : self.collection_name,\r\n        }\r\n        \r\n        objects = []\r\n        for object in self.__remote_mpi.ticket_request(request):\r\n            objects.append(AGTObject(self.collection_name, \\\r\n                                     self.__remote_agtuuid, \\\r\n                                     self.__remote_mpi, \\\r\n                                     object))\r\n        \r\n        return objects\r\n\r\n    def find_objuuids(self, **kargs):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"find collection object uuids\",\r\n            \"query\" : kargs,\r\n            \"name\" : self.collection_name,\r\n        }\r\n            \r\n        return self.__remote_mpi.ticket_request(request)\r\n\r\n    def get_object(self, objuuid = None):\r\n        if objuuid:\r\n            request = {\r\n                \"dest\" : self.__remote_agtuuid,\r\n                \"type\" : \"get collection object\",\r\n                \"objuuid\" : objuuid,\r\n                \"name\" : self.collection_name,\r\n            }\r\n        else:\r\n            request = {\r\n                \"dest\" : self.__remote_agtuuid,\r\n                \"type\" : \"get collection object\",\r\n                \"name\" : self.collection_name,\r\n            }\r\n            \r\n        return AGTObject(self.collection_name, \\\r\n                         self.__remote_agtuuid, \\\r\n                         self.__remote_mpi, \\\r\n                         self.__remote_mpi.ticket_request(request))\r\n    \r\n    def set_object(self, object):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"set collection object\",\r\n            \"name\" : self.collection_name,\r\n            \"object\" : object\r\n        }\r\n            \r\n        self.__remote_mpi.ticket_request(request)\r\n    \r\n    def delete_object(self, objuuid):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"delete collection object\",\r\n            \"name\" : self.collection_name,\r\n            \"objuuid\" : objuuid\r\n        }\r\n            \r\n        self.__remote_mpi.ticket_request(request)\r\n\r\n    def list_objuuids(self):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"list collection object uuids\",\r\n            \"name\" : self.collection_name,\r\n        }\r\n            \r\n        return self.__remote_mpi.ticket_request(request)\r\n\r\nclass FileWrapper:\r\n    def __init__(self, filename, remote_agtuuid, remote_mpi, mode):\r\n        self.__remote_agtuuid = remote_agtuuid\r\n        self.__remote_mpi = remote_mpi\r\n        \r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"file handle open\",\r\n            \"filename\" : filename,\r\n            \"mode\" : mode\r\n        }\r\n            \r\n        response = self.__remote_mpi.ticket_request(request)\r\n        \r\n        try:\r\n            self.__fhduuid = response[\"fhduuid\"]\r\n        except:\r\n            raise Exception(\"{0}\\n{1}\".format(traceback.format_exc(), response))\r\n\r\n    def __del__(self):\r\n        self.close()\r\n    \r\n    def tell(self):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"file handle tell\",\r\n            \"fhduuid\" : self.__fhduuid,\r\n        }\r\n            \r\n        return self.__remote_mpi.ticket_request(request)[\"position\"]\r\n\r\n    def close(self):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"file handle close\",\r\n            \"fhduuid\" : self.__fhduuid\r\n        }\r\n            \r\n        self.__remote_mpi.ticket_request(request)\r\n\r\n    def open(self, **kargs):\r\n        self.__init__(**kargs)\r\n    \r\n    def fileno(self):\r\n        return 0\r\n    \r\n    def seek(self, seek_position):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"file handle seek\",\r\n            \"fhduuid\" : self.__fhduuid,\r\n            \"position\" : seek_position\r\n        }\r\n            \r\n        self.__remote_mpi.ticket_request(request)\r\n    \r\n    def read(self, num_bytes = None):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"file handle read\",\r\n            \"fhduuid\" : self.__fhduuid\r\n        }\r\n        \r\n        if num_bytes != None:\r\n            request[\"size\"] = num_bytes\r\n            \r\n        response = self.__remote_mpi.ticket_request(request)\r\n        \r\n        try:\r\n            return buffer(b64decode(response[\"b64data\"]))\r\n        except:\r\n            raise Exception(\"{0}\\n{1}\".format(traceback.format_exc(), response))\r\n\r\n    def next(self):        \r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"file handle read\",\r\n            \"fhduuid\" : self.__fhduuid,\r\n            \"size\" : 1\r\n        }\r\n        \r\n        response = self.__remote_mpi.ticket_request(request)\r\n        \r\n        try:\r\n            return buffer(b64decode(response[\"b64data\"]))\r\n        except:\r\n            raise Exception(\"{0}\\n{1}\".format(traceback.format_exc(), response))\r\n\r\n    def readline(self, num_bytes = None):        \r\n        org_position = self.tell()\r\n        \r\n        line = \"\"\r\n        \r\n        while \"\\n\" not in line:\r\n            data = self.read(4096)\r\n            line += data\r\n            \r\n            if len(data) == 0:\r\n                break\r\n        \r\n        self.seek(org_position + len(line))\r\n        \r\n        return line.split(\"\\n\")[0]\r\n    \r\n    def readlines(self, num_bytes = None):        \r\n        if num_bytes == None:\r\n            data = str(self.read())\r\n        else:\r\n            data = str(self.read(num_bytes))\r\n\r\n        return data.split(\"\\n\")\r\n    \r\n    def truncate(self, num_bytes = None):\r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"file handle truncate\",\r\n            \"fhduuid\" : self.__fhduuid\r\n        }\r\n        \r\n        if num_bytes == None:\r\n            request[\"size\"] = self.tell() + 1\r\n        else:\r\n            request[\"size\"] = num_bytes\r\n            \r\n        self.__remote_mpi.ticket_request(request)\r\n\r\n    def flush(self):\r\n        pass\r\n    \r\n    def isatty(self):\r\n        return False\r\n    \r\n    def writelines(self, raw_buffer_list):\r\n        for raw_buffer in raw_buffer_list:\r\n            self.write(raw_buffer)\r\n    \r\n    def write(self, raw_buffer):\r\n        buffer = bytearray()\r\n        \r\n        buffer.extend(raw_buffer)\r\n        \r\n        request = {\r\n            \"dest\" : self.__remote_agtuuid,\r\n            \"type\" : \"file handle write\",\r\n            \"fhduuid\" : self.__fhduuid,\r\n            \"b64data\" : b64encode(buffer)\r\n        }\r\n            \r\n        self.__remote_mpi.ticket_request(request)", 
        "changed": false, 
        "children": [], 
        "coluuid": "25adc998-7112-4670-67ab-3ad78a94e9ca", 
        "context": {
            "copy": {
                "action": {
                    "method": "copy node", 
                    "params": {
                        "objuuid": "8b91d444-a1d3-8584-b956-39ba482d1759"
                    }, 
                    "route": "inventory/ajax_copy_object"
                }, 
                "label": "Copy"
            }, 
            "delete": {
                "action": {
                    "method": "delete node", 
                    "params": {
                        "objuuid": "8b91d444-a1d3-8584-b956-39ba482d1759"
                    }, 
                    "route": "inventory/ajax_delete"
                }, 
                "label": "Delete"
            }, 
            "edit": {
                "action": {
                    "method": "edit console", 
                    "params": {
                        "objuuid": "8b91d444-a1d3-8584-b956-39ba482d1759"
                    }, 
                    "route": "inventory/ajax_get_object"
                }, 
                "label": "Edit"
            }
        }, 
        "icon": "/images/console_icon.png", 
        "name": "AGENT", 
        "objuuid": "8b91d444-a1d3-8584-b956-39ba482d1759", 
        "parent": "69b4d682-21e5-12a1-2771-d14b728a57bb", 
        "type": "console"
    }
}