#!/usr/bin/python

import paramiko
import traceback

def execute(event, context):
    ssh_client = paramiko.SSHClient()
    
    ssh_client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
    
    if "password" in event:
        ssh_client.connect(event["host"], \
                           username = event["username"], \
                           password = event["password"])
    elif "pkey" in event:
        ssh_client.connect(event["host"], \
                           username = event["username"], \
                           pkey = event["pkey"])
    else:
        raise Exception("Password or private key not present in event object!")
    
    ssh_client.get_transport().set_keepalive(30)
    
    if "sudo command" in event:
        sudo_command = event["sudo command"]
    else:
        sudo_command = True
    
    if event["username"] == "root" or not sudo_command:
        stdin, stdout, stderr = ssh_client.exec_command(event["command"])
    else:
        if " > " in event["command"] or " >> " in event["command"]:
            stdin, stdout, stderr = ssh_client.exec_command("sudo -S bash -c '{0}'".format(event["command"]))
        else:
            stdin, stdout, stderr = ssh_client.exec_command('sudo -S ' + event["command"])
        stdin.write(event["password"] + '\n')
        stdin.flush()
    
    # Lossy ascii character set conversion
    output_buffer = ""
    for c in stdout.read().replace("[sudo] password for {0}:".format(event["username"]), ""):
        try:
            output_buffer += c.encode("ascii", "ignore")
        except Exception:
            pass

    # Lossy ascii character set conversion
    stderr_buffer = ""
    for c in stderr.read().replace("[sudo] password for {0}:".format(event["username"]), ""):
        try:
            stderr_buffer += c.encode("ascii", "ignore")
        except Exception:
            pass
        
    status = stdout.channel.recv_exit_status()
    
    ssh_client.close()    
        
    return {
        "status" : status, 
        "stdout" : output_buffer, 
        "stderr" : stderr_buffer
    }
    